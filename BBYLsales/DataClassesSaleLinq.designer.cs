#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace BBYLsales
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sale")]
	public partial class DataClassesSaleLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertF_S_CLOTHTYPE(F_S_CLOTHTYPE instance);
    partial void UpdateF_S_CLOTHTYPE(F_S_CLOTHTYPE instance);
    partial void DeleteF_S_CLOTHTYPE(F_S_CLOTHTYPE instance);
    partial void InsertF_S_SIZE(F_S_SIZE instance);
    partial void UpdateF_S_SIZE(F_S_SIZE instance);
    partial void DeleteF_S_SIZE(F_S_SIZE instance);
    partial void InsertF_S_USER(F_S_USER instance);
    partial void UpdateF_S_USER(F_S_USER instance);
    partial void DeleteF_S_USER(F_S_USER instance);
    #endregion
		
		public DataClassesSaleLinqDataContext() : 
				base(global::BBYLsales.Properties.Settings.Default.saleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSaleLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSaleLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSaleLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSaleLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<F_S_CLOTHTYPE> F_S_CLOTHTYPE
		{
			get
			{
				return this.GetTable<F_S_CLOTHTYPE>();
			}
		}
		
		public System.Data.Linq.Table<F_S_SIZE> F_S_SIZE
		{
			get
			{
				return this.GetTable<F_S_SIZE>();
			}
		}
		
		public System.Data.Linq.Table<F_S_USER> F_S_USER
		{
			get
			{
				return this.GetTable<F_S_USER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_S_CLOTHTYPE")]
	public partial class F_S_CLOTHTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _类别;
		
		private int _父类ID;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On类别Changing(string value);
    partial void On类别Changed();
    partial void On父类IDChanging(int value);
    partial void On父类IDChanged();
    #endregion
		
		public F_S_CLOTHTYPE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_类别", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 类别
		{
			get
			{
				return this._类别;
			}
			set
			{
				if ((this._类别 != value))
				{
					this.On类别Changing(value);
					this.SendPropertyChanging();
					this._类别 = value;
					this.SendPropertyChanged("类别");
					this.On类别Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_父类ID", DbType="Int NOT NULL")]
		public int 父类ID
		{
			get
			{
				return this._父类ID;
			}
			set
			{
				if ((this._父类ID != value))
				{
					this.On父类IDChanging(value);
					this.SendPropertyChanging();
					this._父类ID = value;
					this.SendPropertyChanged("父类ID");
					this.On父类IDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_S_SIZE")]
	public partial class F_S_SIZE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _尺寸;
		
		private string _描述;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On尺寸Changing(string value);
    partial void On尺寸Changed();
    partial void On描述Changing(string value);
    partial void On描述Changed();
    #endregion
		
		public F_S_SIZE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_尺寸", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 尺寸
		{
			get
			{
				return this._尺寸;
			}
			set
			{
				if ((this._尺寸 != value))
				{
					this.On尺寸Changing(value);
					this.SendPropertyChanging();
					this._尺寸 = value;
					this.SendPropertyChanged("尺寸");
					this.On尺寸Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_描述", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 描述
		{
			get
			{
				return this._描述;
			}
			set
			{
				if ((this._描述 != value))
				{
					this.On描述Changing(value);
					this.SendPropertyChanging();
					this._描述 = value;
					this.SendPropertyChanged("描述");
					this.On描述Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_S_USER")]
	public partial class F_S_USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _名称;
		
		private string _类型;
		
		private string _权限;
		
		private string _密码;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On名称Changing(string value);
    partial void On名称Changed();
    partial void On类型Changing(string value);
    partial void On类型Changed();
    partial void On权限Changing(string value);
    partial void On权限Changed();
    partial void On密码Changing(string value);
    partial void On密码Changed();
    #endregion
		
		public F_S_USER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_名称", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 名称
		{
			get
			{
				return this._名称;
			}
			set
			{
				if ((this._名称 != value))
				{
					this.On名称Changing(value);
					this.SendPropertyChanging();
					this._名称 = value;
					this.SendPropertyChanged("名称");
					this.On名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_类型", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 类型
		{
			get
			{
				return this._类型;
			}
			set
			{
				if ((this._类型 != value))
				{
					this.On类型Changing(value);
					this.SendPropertyChanging();
					this._类型 = value;
					this.SendPropertyChanged("类型");
					this.On类型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_权限", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 权限
		{
			get
			{
				return this._权限;
			}
			set
			{
				if ((this._权限 != value))
				{
					this.On权限Changing(value);
					this.SendPropertyChanging();
					this._权限 = value;
					this.SendPropertyChanged("权限");
					this.On权限Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_密码", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 密码
		{
			get
			{
				return this._密码;
			}
			set
			{
				if ((this._密码 != value))
				{
					this.On密码Changing(value);
					this.SendPropertyChanging();
					this._密码 = value;
					this.SendPropertyChanged("密码");
					this.On密码Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
